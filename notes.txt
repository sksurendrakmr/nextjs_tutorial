React Server Components (RSC)
--
React server components is a new architecture introduced by the React team in version
18 which was quickly embraced by Next.js

The architecture introduces a new way of creating React components, splitting them into 
two types:
 - Server components
 - Client components


 Server components
 ---
 - In Next.js, all components are server components by default.
 - They have the ability to run tasks like reading files or fetching data from a database.
 - However, they don't have the ability to use hooks or handle user interactions.

 Client components
 ---

 - To create a client component, it's necessary to add "use client" at the top of the component file
 - Client components can't perform tasks like reading files, but they have the ability to use hooks and manage interactions.



 Routing
 ---
 Next.js has a file system based routing mechanism.

 URL paths that users can access in the browser are defined by files and folders in our codebase.

 Next.js is a file based routing mechanism but does that mean every file in our app corresponds to a route?? --> NO

 Routing conventions
 ---
 All routes must be placed inside the app folder.
 Every file that corresponds to a route must be named page.js or page.tsx.
 Each folder corresponds to a path segment in the browser URL.

Notes: Route is associated with file based on the containing folders name within the 
app folder.

By creating a nested folder structure, files will automatically be routed in the same
way within the URL.

Private folders
---
A private folder indicates that it is a private implementation detail and should not be
considered by the routing system

The folder and all its subfolders are excluded from routing.

Prefix the folder name with an underscore.

Use for 
- For separting UI logic from routing logic 
- For consistently organizing internal files across a project.
- For sorting and grouping files in code editor.
- For avoiding potential naming conflicts with future Next.js file conventions.

If we want to include an underscore in URL segments, we can prefix the folder name "%5F", which is the URL-encoded form of an underscore.

Route Groups
---
Allows us to logically group our routes and project files without affecting the URL path structure.

Organize routes and project files into groups based on sections or intent.

Route group -> we can mark the folder as route group to exclude it to route URL path

By wrapping the folder name within parenthesis, we informing nextjs that auth folder
will be treated as route group and its name will be omitted from the URL path. 

Layouts
---
A page is UI that is unique to a route.
A layout is UI that is shared between multiple pages in the app.

How to create Layouts
---
we can define a layout by default exporting a react component from a layput.js or layout.tsx file.
That component should accept a children prop that will be populated with a child page 
during rendering.

Nested layout
----
Layouts can be nested.
If we want to create a layout specifically for a route, we can create layout.tsx file 
withing that folder.      

Route Group Layout
---

Route group uses:
---
To organize the project in a manner that doesn't affect the URL.
To selectively apply a layout to certain segments while leaving others unchanged.


Routing Metadata
---

Ensuring proper search engine optimization (SEO) is crucial for increasing visibility
and attracting users.

Next.js introduced the Metadata API which allows us to define metadata for each page.

Metadata ensures accurate and relevant information is displayed when our pages are shared or indexed.

Configuring Metadata
---
Export a static metadata object.
Export a dynamic generateMetadata function

Metadata rules
---
Both layout.tsx and page.tsx files can export metadata. If defined in a layout, it applies to all pages in that layout, but if defined in a page, it applies only to that page.


Metadata is read in order, from the root level down to the final page level.

When there's metadata in multiple places for the same route, they get combined but page metdata will replace layout metadata if they have the same properties.

Dynamic metadata depends on dynamic information such as the current route parameters,
external data or metadata in parent segments.

To define dynamic metadata, we export a generateMetadata() that returns a metadata object from a layout or page.tsx file. 

title Metadata
---
The title field's primary purpose is to define the document title.
It can be either a string or an object.


Navigation
---
To enable client-side navigation, Nextjs provides us with the Link component

The <Link> component is a React component that extends the HTML `<a>` element, and it's 
the primary way to navigate between routes in Nextjs

To use it, we need to import it from "next/link"


Template
---
The layouts only mount the part representing the content of the newly loaded page 
but keep all the common elements untouched.
Layout doesn't remount shared components resulting in better performance.

In majority of the time, we need this scenario.
However, we might come across a scenari where we need the layouts to create a new 
instance for each of their children on navigation.

In such situation, we will use the template file as replacement of the layout file.

Templates are similar to layouts in that they wrap each child layout or page.
But, with templates, when a user navigates between routes that share a template, a new instance of the component is mounted. DOM elements are recreated, state is not preserved, and effects are re-synchronized

A template can be defined by exporting a default React component from a template.js or template.tsx file.

Similar to layouts, tempaltes also should accept a children prop which will render the nested segments in the route.

It is possible that layout and template co-exist.
In such scenario, Layout renders first and the layout's children is replaced by the component exported from the template file.


Loading UI
---

loading.tsx 
--
This file allows us to create loading states that are displayed to users while a specific route segment's content is loading.

The loading state appears immediately upon navigation, giving users the assurance that the application is responsive and actively loading content.


Handling Errors in Nested routes
---
Errors bubble up to the closest parent error boundary.
This implies that an error.tsx file will cater to errors for all its nested child segments.

By positioning error.tsx files at different levels in the nested folders of a route, we can achieve a more granular level of error handling.


Handling errors in Layouts
---
An error.tsx file will handle errors for all its nested child segments.

The error boundary does not catch errors thrown here because it's nested inside the layout component.

we should keep the error.tsx file in the same directory as layout


Parallel Routes 
---
Parallel routes are an advanced routing mechanism that allows for the simultaneous rendering of multiple pages within the same layout.


Intercepting Routes 
---
Intercepting routes allow us to intercept or stop the default routing behaviour to present an alternate view or component when navigating through the UI, while still preserving the indended route for scenarios like page reloads.

This can be usefule if we want to show a route while keeping the context of the current page.

Route Handlers
----
We have learnt how to route a pages.
We can also create custom request handlers for our routes using a feature called route handlers.

Unlike page routes, which respond with HTML content, route handlers allow us to create RESTful endpoints, giving us full control over the response.

There is no overhead of having to create and configure a separate server.

Route handlers are also great for making external API requests.

Route handlers run server-side, ensuring that sensitive information like private keys remains secure and never gets shipped to the browser.

Route handlers are the equivalent of API routes in page router.

Like the page routes, route handlers should also be placed inside app folder.


Dynamic Route Handlers 
---
To handle patch and delete request, it's little bit tricky as we need some kind of identifier such as id in the path to do the operation.

This id will be dynamic segment.
http://localhost:8080/comments/:id

We will see how to create a dynamic API route which will return a single comment 
based on the ID.

Handling PATCH request 
--
Partial modification to a resource.


Headers in Route Handlers
---
HTTP headers represent the metadata associated with an API request and response.

Request Headers
--
These are sent by the client, such as a web brower, to the server. They contain essential information about the request, which helps the server understand and process it correctly.

'User-Agent' which identifies the browser and operating system to the server.
'Accept' which indicates the content types like text, video, or image formats that the client can process.
'Authorization' header used by the client to authenticate itself to the server.

Response Headers
---
These are sent back from the server to the client. They provide information about the server and the data being sent in the response.
'Content-Type' header which indeicates the media type of the response. It tells the client what the data type of the returned content is, such as text/html for HTML documents, application/json for JSON data etc.


Cookies in Route Handlers
---
Cookies are small pieces of data that a server sends to a user's web browser.

The browser may store the cookie and send it back to the same server with later requests.

Cookies are mainly used for three purposes
 - session management like logins and shopping carts
 - Personalization like user preferences and themes
 - Tracking like recording and analyzing user behaviour.


 Caching in Route Handlers
 ----
 Route Handlers are cached by default when using the GET method with the Response object in Next.js

 How to opt out of caching??
  - dynamic mode in segment config option

  There are three other ways to opt out of caching
  - using the request object with the GET method
  - employing dynamic functions like headers() and cookies()
  - using any HTTP method other than GET


Middleware
---
Middleware in Next.js is a powerful feature that offers a robust way to intercept and control the flow of requests and responses within your applications.

It does this at a global level significantly enchancing features like redirection, URL rewrites, authentication, headers and cookies management, and more.

Middleware allows us to specify paths where it will be active.

There are two approches
- custom matcher config
- conditional statement

steps to create a middleware:
1. create either middleware.ts or js inside src folder.


Rendering 
---
Rendering is the process that transforms the code we write into user interfaces.
In Next.js, choosing the right time and place to do this rendering is vital for building a performant application.

Client-side Rendering
---

This method of rendering, where the component code is transformed into a user interface directly within the browser (the client), is known as client-side rendering (CSR)

CSR quickly became the standard for SPAs, with widespread adoption.

It wasn't long before developers began noticing some inherent drawbacks to this approach.

Drawbacks of CSR 
---
Generating HTML that mainly contains a single div tag is not optimal for SEO, as it provides little content for search engines to index.

Performance 
--
Having the browser (the client) handle all the work, such as fetching data, computing the UI, and making the HTML interactive, can slow things down. Users might see a blank screen or a loading spinner while the page loads.

Each new feature added to the application increases the size of the javascrip bundle, prolonging the wait time for users to see the UI.


Server-side rendering (SSR)
---
Recollecting Drawbacks of CSR 
--

1. Reliance on javascript for rendering content on the client side can significatly hurt SEO, as search engines might struggle to index the content properly.

2. The user experience can suffer from slow load times, as the brower has to download, parse, and execute javascript before the user sees any meaningful content on the page.


With SSR, the interactivity of the page is on hold until the javascript bundle comprising react itself along with the application specific code has been completly downlaoded and executed by the browser. This phase is known as hyderation where the specific HTML page initially served by server is brought to life.

During hydration, React takes control in the browser, reconstructing the component tree in memory, based on the static HTML that was served.

It carefully plans the placement of interactive elements within this tree. Then, React proceeds to bind the necessary javascript logic to these elements.

This involves initializing the application state, attaching event handlers for actions such as clicks and mouseovers, and setting up any other dynamic functionalities required for a fully interactive user experience. 


Server-side solutions is categorized into two categories :
1. Static site Generation (SSG)
2. Server-side Rendering (SSR)

SSG occurs at build time, when the application is deployed on the server. This results in pages that are already rendered and ready to serve. It is ideal for content that doesn't change often, like blog posts.

SSR, on the other hand, renders pages on-demand in response to user requests. It is suitable for personalized content like social media feeds, where the HTML depends on the logged-in user.


SSR ensure faster page load and better SEOs

Challenges
---
1. we have to fetch everything before we can show anything
--
Components cannot start rendering and then pause or "wait" while data is still being loaded.

If a component needs to fetch data from a database or another source (like an API), this fetching must be completed before the server can begin rendering the page.

This can delay the server's response time to the browser, as the server must finish collecting all necessary data before any part of the page can be sent to the client.


2. we have to load everything before we can hydrate anything 
--
For successful hydration, where React adds interactivity to the server-rendered HTML, the component tree in the browser must exactly match the server-generated component tree.

This means that all the javascript for the components must be loaded on the client before we can start hydrating any of them.

3. we have to hydrate everything beofre we can interact with anything 
--
React hydrates the component tree in a single pass, meaning once it starts hydrating, it won't stop until it's finished with the entire tree.
As a consequence, all components must be hudrated before we can interact with any of them.


These three problems of
1. having to load the data for the entire page 
2. load the js for the entire page and 
3. hydrate the entire page 

create an "all or nothing" waterfall problem that spans from the server to the client, where each issue must be resolved beofre moving to the next one.