React Server Components (RSC)
--
React server components is a new architecture introduced by the React team in version
18 which was quickly embraced by Next.js

The architecture introduces a new way of creating React components, splitting them into 
two types:
 - Server components
 - Client components


 Server components
 ---
 - In Next.js, all components are server components by default.
 - They have the ability to run tasks like reading files or fetching data from a database.
 - However, they don't have the ability to use hooks or handle user interactions.

 Client components
 ---

 - To create a client component, it's necessary to add "use client" at the top of the component file
 - Client components can't perform tasks like reading files, but they have the ability to use hooks and manage interactions.



 Routing
 ---
 Next.js has a file system based routing mechanism.

 URL paths that users can access in the browser are defined by files and folders in our codebase.

 Next.js is a file based routing mechanism but does that mean every file in our app corresponds to a route?? --> NO

 Routing conventions
 ---
 All routes must be placed inside the app folder.
 Every file that corresponds to a route must be named page.js or page.tsx.
 Each folder corresponds to a path segment in the browser URL.

Notes: Route is associated with file based on the containing folders name within the 
app folder.

By creating a nested folder structure, files will automatically be routed in the same
way within the URL.

Private folders
---
A private folder indicates that it is a private implementation detail and should not be
considered by the routing system

The folder and all its subfolders are excluded from routing.

Prefix the folder name with an underscore.

Use for 
- For separting UI logic from routing logic 
- For consistently organizing internal files across a project.
- For sorting and grouping files in code editor.
- For avoiding potential naming conflicts with future Next.js file conventions.

If we want to include an underscore in URL segments, we can prefix the folder name "%5F", which is the URL-encoded form of an underscore.

Route Groups
---
Allows us to logically group our routes and project files without affecting the URL path structure.

Organize routes and project files into groups based on sections or intent.

Route group -> we can mark the folder as route group to exclude it to route URL path

By wrapping the folder name within parenthesis, we informing nextjs that auth folder
will be treated as route group and its name will be omitted from the URL path. 

Layouts
---
A page is UI that is unique to a route.
A layout is UI that is shared between multiple pages in the app.

How to create Layouts
---
we can define a layout by default exporting a react component from a layput.js or layout.tsx file.
That component should accept a children prop that will be populated with a child page 
during rendering.

Nested layout
----
Layouts can be nested.
If we want to create a layout specifically for a route, we can create layout.tsx file 
withing that folder.      

Route Group Layout
---

Route group uses:
---
To organize the project in a manner that doesn't affect the URL.
To selectively apply a layout to certain segments while leaving others unchanged.


Routing Metadata
---

Ensuring proper search engine optimization (SEO) is crucial for increasing visibility
and attracting users.

Next.js introduced the Metadata API which allows us to define metadata for each page.

Metadata ensures accurate and relevant information is displayed when our pages are shared or indexed.

Configuring Metadata
---
Export a static metadata object.
Export a dynamic generateMetadata function

Metadata rules
---
Both layout.tsx and page.tsx files can export metadata. If defined in a layout, it applies to all pages in that layout, but if defined in a page, it applies only to that page.


Metadata is read in order, from the root level down to the final page level.

When there's metadata in multiple places for the same route, they get combined but page metdata will replace layout metadata if they have the same properties.

Dynamic metadata depends on dynamic information such as the current route parameters,
external data or metadata in parent segments.

To define dynamic metadata, we export a generateMetadata() that returns a metadata object from a layout or page.tsx file. 

title Metadata
---
The title field's primary purpose is to define the document title.
It can be either a string or an object.